<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="10601"><g><title>cvrp`&lt;rand::distr::uniform::int::UniformUsize as rand::distr::uniform::UniformSampler&gt;::sample_single (19 samples, 0.18%)</title><rect x="0.0000%" y="165" width="0.1792%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="19"/><text x="0.2500%" y="175.50"></text></g><g><title>cvrp`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (101 samples, 0.95%)</title><rect x="0.1792%" y="165" width="0.9527%" height="15" fill="rgb(217,0,24)" fg:x="19" fg:w="101"/><text x="0.4292%" y="175.50"></text></g><g><title>cvrp`DYLD-STUB$$free (32 samples, 0.30%)</title><rect x="1.1320%" y="165" width="0.3019%" height="15" fill="rgb(221,193,54)" fg:x="120" fg:w="32"/><text x="1.3820%" y="175.50"></text></g><g><title>cvrp`DYLD-STUB$$memcpy (7 samples, 0.07%)</title><rect x="1.4433%" y="165" width="0.0660%" height="15" fill="rgb(248,212,6)" fg:x="153" fg:w="7"/><text x="1.6933%" y="175.50"></text></g><g><title>cvrp`cvrp::crossover::crossover (5 samples, 0.05%)</title><rect x="1.5187%" y="165" width="0.0472%" height="15" fill="rgb(208,68,35)" fg:x="161" fg:w="5"/><text x="1.7687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (42 samples, 0.40%)</title><rect x="3.0563%" y="133" width="0.3962%" height="15" fill="rgb(232,128,0)" fg:x="324" fg:w="42"/><text x="3.3063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.15%)</title><rect x="3.3016%" y="117" width="0.1509%" height="15" fill="rgb(207,160,47)" fg:x="350" fg:w="16"/><text x="3.5516%" y="127.50"></text></g><g><title>cvrp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (80 samples, 0.75%)</title><rect x="2.7167%" y="149" width="0.7546%" height="15" fill="rgb(228,23,34)" fg:x="288" fg:w="80"/><text x="2.9667%" y="159.50"></text></g><g><title>cvrp`&lt;rand::distr::uniform::int::UniformUsize as rand::distr::uniform::UniformSampler&gt;::sample_single (48 samples, 0.45%)</title><rect x="3.4714%" y="149" width="0.4528%" height="15" fill="rgb(218,30,26)" fg:x="368" fg:w="48"/><text x="3.7214%" y="159.50"></text></g><g><title>cvrp`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (44 samples, 0.42%)</title><rect x="3.9242%" y="149" width="0.4151%" height="15" fill="rgb(220,122,19)" fg:x="416" fg:w="44"/><text x="4.1742%" y="159.50"></text></g><g><title>cvrp`DYLD-STUB$$malloc (11 samples, 0.10%)</title><rect x="4.3486%" y="149" width="0.1038%" height="15" fill="rgb(250,228,42)" fg:x="461" fg:w="11"/><text x="4.5986%" y="159.50"></text></g><g><title>cvrp`DYLD-STUB$$memcpy (5 samples, 0.05%)</title><rect x="4.4524%" y="149" width="0.0472%" height="15" fill="rgb(240,193,28)" fg:x="472" fg:w="5"/><text x="4.7024%" y="159.50"></text></g><g><title>cvrp`__rdl_alloc (10 samples, 0.09%)</title><rect x="4.4996%" y="149" width="0.0943%" height="15" fill="rgb(216,20,37)" fg:x="477" fg:w="10"/><text x="4.7496%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="4.6599%" y="85" width="0.0189%" height="15" fill="rgb(206,188,39)" fg:x="494" fg:w="2"/><text x="4.9099%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="4.6882%" y="69" width="0.0283%" height="15" fill="rgb(217,207,13)" fg:x="497" fg:w="3"/><text x="4.9382%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.06%)</title><rect x="4.6788%" y="85" width="0.0566%" height="15" fill="rgb(231,73,38)" fg:x="496" fg:w="6"/><text x="4.9288%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="4.7165%" y="69" width="0.0189%" height="15" fill="rgb(225,20,46)" fg:x="500" fg:w="2"/><text x="4.9665%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="4.7165%" y="53" width="0.0189%" height="15" fill="rgb(210,31,41)" fg:x="500" fg:w="2"/><text x="4.9665%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="4.7165%" y="37" width="0.0189%" height="15" fill="rgb(221,200,47)" fg:x="500" fg:w="2"/><text x="4.9665%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.05%)</title><rect x="4.7354%" y="69" width="0.0472%" height="15" fill="rgb(226,26,5)" fg:x="502" fg:w="5"/><text x="4.9854%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="4.7543%" y="53" width="0.0283%" height="15" fill="rgb(249,33,26)" fg:x="504" fg:w="3"/><text x="5.0043%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.03%)</title><rect x="4.7920%" y="37" width="0.0283%" height="15" fill="rgb(235,183,28)" fg:x="508" fg:w="3"/><text x="5.0420%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="4.7826%" y="69" width="0.0472%" height="15" fill="rgb(221,5,38)" fg:x="507" fg:w="5"/><text x="5.0326%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="4.7920%" y="53" width="0.0377%" height="15" fill="rgb(247,18,42)" fg:x="508" fg:w="4"/><text x="5.0420%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="4.8392%" y="69" width="0.0189%" height="15" fill="rgb(241,131,45)" fg:x="513" fg:w="2"/><text x="5.0892%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.14%)</title><rect x="4.7354%" y="85" width="0.1415%" height="15" fill="rgb(249,31,29)" fg:x="502" fg:w="15"/><text x="4.9854%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="4.8580%" y="69" width="0.0189%" height="15" fill="rgb(225,111,53)" fg:x="515" fg:w="2"/><text x="5.1080%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (24 samples, 0.23%)</title><rect x="4.6599%" y="101" width="0.2264%" height="15" fill="rgb(238,160,17)" fg:x="494" fg:w="24"/><text x="4.9099%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (31 samples, 0.29%)</title><rect x="4.6222%" y="117" width="0.2924%" height="15" fill="rgb(214,148,48)" fg:x="490" fg:w="31"/><text x="4.8722%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="4.8958%" y="101" width="0.0189%" height="15" fill="rgb(232,36,49)" fg:x="519" fg:w="2"/><text x="5.1458%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="4.8958%" y="85" width="0.0189%" height="15" fill="rgb(209,103,24)" fg:x="519" fg:w="2"/><text x="5.1458%" y="95.50"></text></g><g><title>cvrp`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (35 samples, 0.33%)</title><rect x="4.6033%" y="149" width="0.3302%" height="15" fill="rgb(229,88,8)" fg:x="488" fg:w="35"/><text x="4.8533%" y="159.50"></text></g><g><title>cvrp`alloc::raw_vec::finish_grow (34 samples, 0.32%)</title><rect x="4.6128%" y="133" width="0.3207%" height="15" fill="rgb(213,181,19)" fg:x="489" fg:w="34"/><text x="4.8628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="4.9146%" y="117" width="0.0189%" height="15" fill="rgb(254,191,54)" fg:x="521" fg:w="2"/><text x="5.1646%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.04%)</title><rect x="4.9618%" y="69" width="0.0377%" height="15" fill="rgb(241,83,37)" fg:x="526" fg:w="4"/><text x="5.2118%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.07%)</title><rect x="4.9429%" y="101" width="0.0660%" height="15" fill="rgb(233,36,39)" fg:x="524" fg:w="7"/><text x="5.1929%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.05%)</title><rect x="4.9618%" y="85" width="0.0472%" height="15" fill="rgb(226,3,54)" fg:x="526" fg:w="5"/><text x="5.2118%" y="95.50"></text></g><g><title>cvrp`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (9 samples, 0.08%)</title><rect x="4.9335%" y="149" width="0.0849%" height="15" fill="rgb(245,192,40)" fg:x="523" fg:w="9"/><text x="5.1835%" y="159.50"></text></g><g><title>cvrp`alloc::raw_vec::finish_grow (8 samples, 0.08%)</title><rect x="4.9429%" y="133" width="0.0755%" height="15" fill="rgb(238,167,29)" fg:x="524" fg:w="8"/><text x="5.1929%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 0.08%)</title><rect x="4.9429%" y="117" width="0.0755%" height="15" fill="rgb(232,182,51)" fg:x="524" fg:w="8"/><text x="5.1929%" y="127.50"></text></g><g><title>cvrp`core::slice::sort::stable::merge::merge (570 samples, 5.38%)</title><rect x="5.0939%" y="117" width="5.3769%" height="15" fill="rgb(231,60,39)" fg:x="540" fg:w="570"/><text x="5.3439%" y="127.50">cvrp`co..</text></g><g><title>cvrp`cvrp::evaluator::evaluate (562 samples, 5.30%)</title><rect x="5.1693%" y="101" width="5.3014%" height="15" fill="rgb(208,69,12)" fg:x="548" fg:w="562"/><text x="5.4193%" y="111.50">cvrp`c..</text></g><g><title>cvrp`core::slice::sort::shared::pivot::choose_pivot (27 samples, 0.25%)</title><rect x="10.5556%" y="101" width="0.2547%" height="15" fill="rgb(235,93,37)" fg:x="1119" fg:w="27"/><text x="10.8056%" y="111.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (27 samples, 0.25%)</title><rect x="10.5556%" y="85" width="0.2547%" height="15" fill="rgb(213,116,39)" fg:x="1119" fg:w="27"/><text x="10.8056%" y="95.50"></text></g><g><title>cvrp`core::slice::sort::shared::smallsort::sort4_stable (28 samples, 0.26%)</title><rect x="10.8952%" y="85" width="0.2641%" height="15" fill="rgb(222,207,29)" fg:x="1155" fg:w="28"/><text x="11.1452%" y="95.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (28 samples, 0.26%)</title><rect x="10.8952%" y="69" width="0.2641%" height="15" fill="rgb(206,96,30)" fg:x="1155" fg:w="28"/><text x="11.1452%" y="79.50"></text></g><g><title>cvrp`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (211 samples, 1.99%)</title><rect x="10.8103%" y="101" width="1.9904%" height="15" fill="rgb(218,138,4)" fg:x="1146" fg:w="211"/><text x="11.0603%" y="111.50">c..</text></g><g><title>cvrp`cvrp::evaluator::evaluate (174 samples, 1.64%)</title><rect x="11.1593%" y="85" width="1.6414%" height="15" fill="rgb(250,191,14)" fg:x="1183" fg:w="174"/><text x="11.4093%" y="95.50"></text></g><g><title>cvrp`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.02%)</title><rect x="12.8573%" y="69" width="0.0189%" height="15" fill="rgb(239,60,40)" fg:x="1363" fg:w="2"/><text x="13.1073%" y="79.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (2 samples, 0.02%)</title><rect x="12.8573%" y="53" width="0.0189%" height="15" fill="rgb(206,27,48)" fg:x="1363" fg:w="2"/><text x="13.1073%" y="63.50"></text></g><g><title>cvrp`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (27 samples, 0.25%)</title><rect x="12.8290%" y="85" width="0.2547%" height="15" fill="rgb(225,35,8)" fg:x="1360" fg:w="27"/><text x="13.0790%" y="95.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (22 samples, 0.21%)</title><rect x="12.8761%" y="69" width="0.2075%" height="15" fill="rgb(250,213,24)" fg:x="1365" fg:w="22"/><text x="13.1261%" y="79.50"></text></g><g><title>cvrp`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.07%)</title><rect x="13.0837%" y="69" width="0.0660%" height="15" fill="rgb(247,123,22)" fg:x="1387" fg:w="7"/><text x="13.3337%" y="79.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (7 samples, 0.07%)</title><rect x="13.0837%" y="53" width="0.0660%" height="15" fill="rgb(231,138,38)" fg:x="1387" fg:w="7"/><text x="13.3337%" y="63.50"></text></g><g><title>cvrp`core::slice::sort::stable::quicksort::quicksort (9 samples, 0.08%)</title><rect x="13.0837%" y="85" width="0.0849%" height="15" fill="rgb(231,145,46)" fg:x="1387" fg:w="9"/><text x="13.3337%" y="95.50"></text></g><g><title>cvrp`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.02%)</title><rect x="13.1497%" y="69" width="0.0189%" height="15" fill="rgb(251,118,11)" fg:x="1394" fg:w="2"/><text x="13.3997%" y="79.50"></text></g><g><title>cvrp`core::slice::sort::stable::quicksort::quicksort (63 samples, 0.59%)</title><rect x="12.8007%" y="101" width="0.5943%" height="15" fill="rgb(217,147,25)" fg:x="1357" fg:w="63"/><text x="13.0507%" y="111.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (24 samples, 0.23%)</title><rect x="13.1686%" y="85" width="0.2264%" height="15" fill="rgb(247,81,37)" fg:x="1396" fg:w="24"/><text x="13.4186%" y="95.50"></text></g><g><title>cvrp`core::slice::sort::stable::quicksort::quicksort (1,054 samples, 9.94%)</title><rect x="10.4707%" y="117" width="9.9425%" height="15" fill="rgb(209,12,38)" fg:x="1110" fg:w="1054"/><text x="10.7207%" y="127.50">cvrp`core::sli..</text></g><g><title>cvrp`cvrp::evaluator::evaluate (744 samples, 7.02%)</title><rect x="13.3950%" y="101" width="7.0182%" height="15" fill="rgb(227,1,9)" fg:x="1420" fg:w="744"/><text x="13.6450%" y="111.50">cvrp`cvrp..</text></g><g><title>cvrp`cvrp::evaluator::evaluate (1,149 samples, 10.84%)</title><rect x="20.4132%" y="117" width="10.8386%" height="15" fill="rgb(248,47,43)" fg:x="2164" fg:w="1149"/><text x="20.6632%" y="127.50">cvrp`cvrp::evalu..</text></g><g><title>cvrp`core::slice::sort::stable::drift::sort (2,789 samples, 26.31%)</title><rect x="5.0373%" y="133" width="26.3088%" height="15" fill="rgb(221,10,30)" fg:x="534" fg:w="2789"/><text x="5.2873%" y="143.50">cvrp`core::slice::sort::stable::drift::sort</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.09%)</title><rect x="31.2518%" y="117" width="0.0943%" height="15" fill="rgb(210,229,1)" fg:x="3313" fg:w="10"/><text x="31.5018%" y="127.50"></text></g><g><title>cvrp`core::slice::sort::stable::driftsort_main (2,791 samples, 26.33%)</title><rect x="5.0278%" y="149" width="26.3277%" height="15" fill="rgb(222,148,37)" fg:x="533" fg:w="2791"/><text x="5.2778%" y="159.50">cvrp`core::slice::sort::stable::driftsort_..</text></g><g><title>cvrp`&lt;rand::distr::uniform::int::UniformUsize as rand::distr::uniform::UniformSampler&gt;::sample_single (4 samples, 0.04%)</title><rect x="76.1909%" y="133" width="0.0377%" height="15" fill="rgb(234,67,33)" fg:x="8077" fg:w="4"/><text x="76.4409%" y="143.50"></text></g><g><title>cvrp`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (31 samples, 0.29%)</title><rect x="76.2287%" y="133" width="0.2924%" height="15" fill="rgb(247,98,35)" fg:x="8081" fg:w="31"/><text x="76.4787%" y="143.50"></text></g><g><title>cvrp`rand::rngs::thread::rng (3 samples, 0.03%)</title><rect x="76.5211%" y="133" width="0.0283%" height="15" fill="rgb(247,138,52)" fg:x="8112" fg:w="3"/><text x="76.7711%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.08%)</title><rect x="76.5494%" y="133" width="0.0849%" height="15" fill="rgb(213,79,30)" fg:x="8115" fg:w="9"/><text x="76.7994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.09%)</title><rect x="76.6343%" y="133" width="0.0943%" height="15" fill="rgb(246,177,23)" fg:x="8124" fg:w="10"/><text x="76.8843%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (6 samples, 0.06%)</title><rect x="76.7569%" y="117" width="0.0566%" height="15" fill="rgb(230,62,27)" fg:x="8137" fg:w="6"/><text x="77.0069%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.05%)</title><rect x="76.8135%" y="117" width="0.0472%" height="15" fill="rgb(216,154,8)" fg:x="8143" fg:w="5"/><text x="77.0635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.18%)</title><rect x="76.9456%" y="101" width="0.1792%" height="15" fill="rgb(244,35,45)" fg:x="8157" fg:w="19"/><text x="77.1956%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (9 samples, 0.08%)</title><rect x="77.3512%" y="85" width="0.0849%" height="15" fill="rgb(251,115,12)" fg:x="8200" fg:w="9"/><text x="77.6012%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (76 samples, 0.72%)</title><rect x="76.7286%" y="133" width="0.7169%" height="15" fill="rgb(240,54,50)" fg:x="8134" fg:w="76"/><text x="76.9786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (62 samples, 0.58%)</title><rect x="76.8607%" y="117" width="0.5849%" height="15" fill="rgb(233,84,52)" fg:x="8148" fg:w="62"/><text x="77.1107%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (34 samples, 0.32%)</title><rect x="77.1248%" y="101" width="0.3207%" height="15" fill="rgb(207,117,47)" fg:x="8176" fg:w="34"/><text x="77.3748%" y="111.50"></text></g><g><title>cvrp`cvrp::crossover::crossover (4,888 samples, 46.11%)</title><rect x="31.3555%" y="149" width="46.1089%" height="15" fill="rgb(249,43,39)" fg:x="3324" fg:w="4888"/><text x="31.6055%" y="159.50">cvrp`cvrp::crossover::crossover</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="77.4455%" y="133" width="0.0189%" height="15" fill="rgb(209,38,44)" fg:x="8210" fg:w="2"/><text x="77.6955%" y="143.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (6 samples, 0.06%)</title><rect x="77.4644%" y="149" width="0.0566%" height="15" fill="rgb(236,212,23)" fg:x="8212" fg:w="6"/><text x="77.7144%" y="159.50"></text></g><g><title>cvrp`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.05%)</title><rect x="77.5210%" y="133" width="0.0472%" height="15" fill="rgb(242,79,21)" fg:x="8218" fg:w="5"/><text x="77.7710%" y="143.50"></text></g><g><title>cvrp`cvrp::mutate::mutate (9 samples, 0.08%)</title><rect x="77.5210%" y="149" width="0.0849%" height="15" fill="rgb(211,96,35)" fg:x="8218" fg:w="9"/><text x="77.7710%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.03%)</title><rect x="77.5776%" y="133" width="0.0283%" height="15" fill="rgb(253,215,40)" fg:x="8224" fg:w="3"/><text x="77.8276%" y="143.50"></text></g><g><title>cvrp`&lt;rand::distr::uniform::int::UniformUsize as rand::distr::uniform::UniformSampler&gt;::sample_single (17 samples, 0.16%)</title><rect x="78.1247%" y="133" width="0.1604%" height="15" fill="rgb(211,81,21)" fg:x="8282" fg:w="17"/><text x="78.3747%" y="143.50"></text></g><g><title>cvrp`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (82 samples, 0.77%)</title><rect x="78.2851%" y="133" width="0.7735%" height="15" fill="rgb(208,190,38)" fg:x="8299" fg:w="82"/><text x="78.5351%" y="143.50"></text></g><g><title>cvrp`cvrp::evaluator::evaluate (1,183 samples, 11.16%)</title><rect x="79.0586%" y="133" width="11.1593%" height="15" fill="rgb(235,213,38)" fg:x="8381" fg:w="1183"/><text x="79.3086%" y="143.50">cvrp`cvrp::evalu..</text></g><g><title>cvrp`rand::rngs::thread::rng (10 samples, 0.09%)</title><rect x="90.2179%" y="133" width="0.0943%" height="15" fill="rgb(237,122,38)" fg:x="9564" fg:w="10"/><text x="90.4679%" y="143.50"></text></g><g><title>cvrp`cvrp::tournament_select::tournament_selection (1,376 samples, 12.98%)</title><rect x="77.6059%" y="149" width="12.9799%" height="15" fill="rgb(244,218,35)" fg:x="8227" fg:w="1376"/><text x="77.8559%" y="159.50">cvrp`cvrp::tourname..</text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.27%)</title><rect x="90.3122%" y="133" width="0.2736%" height="15" fill="rgb(240,68,47)" fg:x="9574" fg:w="29"/><text x="90.5622%" y="143.50"></text></g><g><title>cvrp`rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (4 samples, 0.04%)</title><rect x="90.5858%" y="149" width="0.0377%" height="15" fill="rgb(210,16,53)" fg:x="9603" fg:w="4"/><text x="90.8358%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (4 samples, 0.04%)</title><rect x="90.5858%" y="133" width="0.0377%" height="15" fill="rgb(235,124,12)" fg:x="9603" fg:w="4"/><text x="90.8358%" y="143.50"></text></g><g><title>cvrp`rand::rngs::thread::rng (3 samples, 0.03%)</title><rect x="90.6235%" y="149" width="0.0283%" height="15" fill="rgb(224,169,11)" fg:x="9607" fg:w="3"/><text x="90.8735%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (16 samples, 0.15%)</title><rect x="90.6518%" y="149" width="0.1509%" height="15" fill="rgb(250,166,2)" fg:x="9610" fg:w="16"/><text x="90.9018%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.02%)</title><rect x="90.8028%" y="149" width="0.0189%" height="15" fill="rgb(242,216,29)" fg:x="9626" fg:w="2"/><text x="91.0528%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.04%)</title><rect x="90.8216%" y="149" width="0.0377%" height="15" fill="rgb(230,116,27)" fg:x="9628" fg:w="4"/><text x="91.0716%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (71 samples, 0.67%)</title><rect x="90.8594%" y="149" width="0.6697%" height="15" fill="rgb(228,99,48)" fg:x="9632" fg:w="71"/><text x="91.1094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (197 samples, 1.86%)</title><rect x="91.5291%" y="149" width="1.8583%" height="15" fill="rgb(253,11,6)" fg:x="9703" fg:w="197"/><text x="91.7791%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.03%)</title><rect x="93.3874%" y="149" width="0.0283%" height="15" fill="rgb(247,143,39)" fg:x="9900" fg:w="3"/><text x="93.6374%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.08%)</title><rect x="93.4157%" y="149" width="0.0755%" height="15" fill="rgb(236,97,10)" fg:x="9903" fg:w="8"/><text x="93.6657%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.04%)</title><rect x="93.5855%" y="133" width="0.0377%" height="15" fill="rgb(233,208,19)" fg:x="9921" fg:w="4"/><text x="93.8355%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.18%)</title><rect x="93.8968%" y="117" width="0.1792%" height="15" fill="rgb(216,164,2)" fg:x="9954" fg:w="19"/><text x="94.1468%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (72 samples, 0.68%)</title><rect x="93.4912%" y="149" width="0.6792%" height="15" fill="rgb(220,129,5)" fg:x="9911" fg:w="72"/><text x="93.7412%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (58 samples, 0.55%)</title><rect x="93.6232%" y="133" width="0.5471%" height="15" fill="rgb(242,17,10)" fg:x="9925" fg:w="58"/><text x="93.8732%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.09%)</title><rect x="94.0760%" y="117" width="0.0943%" height="15" fill="rgb(242,107,0)" fg:x="9973" fg:w="10"/><text x="94.3260%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.04%)</title><rect x="94.1704%" y="149" width="0.0377%" height="15" fill="rgb(251,28,31)" fg:x="9983" fg:w="4"/><text x="94.4204%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (52 samples, 0.49%)</title><rect x="94.2081%" y="149" width="0.4905%" height="15" fill="rgb(233,223,10)" fg:x="9987" fg:w="52"/><text x="94.4581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (52 samples, 0.49%)</title><rect x="94.2081%" y="133" width="0.4905%" height="15" fill="rgb(215,21,27)" fg:x="9987" fg:w="52"/><text x="94.4581%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (52 samples, 0.49%)</title><rect x="94.2081%" y="117" width="0.4905%" height="15" fill="rgb(232,23,21)" fg:x="9987" fg:w="52"/><text x="94.4581%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (93 samples, 0.88%)</title><rect x="94.6986%" y="149" width="0.8773%" height="15" fill="rgb(244,5,23)" fg:x="10039" fg:w="93"/><text x="94.9486%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="95.5853%" y="149" width="0.0189%" height="15" fill="rgb(226,81,46)" fg:x="10133" fg:w="2"/><text x="95.8353%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (10 samples, 0.09%)</title><rect x="95.6136%" y="149" width="0.0943%" height="15" fill="rgb(247,70,30)" fg:x="10136" fg:w="10"/><text x="95.8636%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.35%)</title><rect x="95.7080%" y="149" width="0.3490%" height="15" fill="rgb(212,68,19)" fg:x="10146" fg:w="37"/><text x="95.9580%" y="159.50"></text></g><g><title>cvrp`cvrp::genetic_algorithm::genetic_algorithm (10,085 samples, 95.13%)</title><rect x="1.5659%" y="165" width="95.1325%" height="15" fill="rgb(240,187,13)" fg:x="166" fg:w="10085"/><text x="1.8159%" y="175.50">cvrp`cvrp::genetic_algorithm::genetic_algorithm</text></g><g><title>libsystem_platform.dylib`_platform_memset (68 samples, 0.64%)</title><rect x="96.0570%" y="149" width="0.6414%" height="15" fill="rgb(223,113,26)" fg:x="10183" fg:w="68"/><text x="96.3070%" y="159.50"></text></g><g><title>cvrp`cvrp::instance_loader::load_instance (2 samples, 0.02%)</title><rect x="96.6984%" y="165" width="0.0189%" height="15" fill="rgb(206,192,2)" fg:x="10251" fg:w="2"/><text x="96.9484%" y="175.50"></text></g><g><title>cvrp`cvrp::tournament_select::tournament_selection (25 samples, 0.24%)</title><rect x="96.7173%" y="165" width="0.2358%" height="15" fill="rgb(241,108,4)" fg:x="10253" fg:w="25"/><text x="96.9673%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (147 samples, 1.39%)</title><rect x="96.9531%" y="165" width="1.3867%" height="15" fill="rgb(247,173,49)" fg:x="10278" fg:w="147"/><text x="97.2031%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.49%)</title><rect x="98.3398%" y="165" width="0.4905%" height="15" fill="rgb(224,114,35)" fg:x="10425" fg:w="52"/><text x="98.5898%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (30 samples, 0.28%)</title><rect x="98.8303%" y="165" width="0.2830%" height="15" fill="rgb(245,159,27)" fg:x="10477" fg:w="30"/><text x="99.0803%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.03%)</title><rect x="99.1133%" y="165" width="0.0283%" height="15" fill="rgb(245,172,44)" fg:x="10507" fg:w="3"/><text x="99.3633%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (64 samples, 0.60%)</title><rect x="99.1510%" y="165" width="0.6037%" height="15" fill="rgb(236,23,11)" fg:x="10511" fg:w="64"/><text x="99.4010%" y="175.50"></text></g><g><title>dyld`start (10,600 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9906%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="10600"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>cvrp`main (10,600 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9906%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="10600"/><text x="0.2500%" y="255.50">cvrp`main</text></g><g><title>cvrp`std::rt::lang_start_internal (10,600 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9906%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="10600"/><text x="0.2500%" y="239.50">cvrp`std::rt::lang_start_internal</text></g><g><title>cvrp`std::rt::lang_start::_{{closure}} (10,600 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9906%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="10600"/><text x="0.2500%" y="223.50">cvrp`std::rt::lang_start::_{{closure}}</text></g><g><title>cvrp`std::sys::backtrace::__rust_begin_short_backtrace (10,600 samples, 99.99%)</title><rect x="0.0000%" y="197" width="99.9906%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="10600"/><text x="0.2500%" y="207.50">cvrp`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>cvrp`cvrp::main (10,600 samples, 99.99%)</title><rect x="0.0000%" y="181" width="99.9906%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="10600"/><text x="0.2500%" y="191.50">cvrp`cvrp::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.24%)</title><rect x="99.7547%" y="165" width="0.2358%" height="15" fill="rgb(221,13,13)" fg:x="10575" fg:w="25"/><text x="100.0047%" y="175.50"></text></g><g><title>all (10,601 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="10601"/><text x="0.2500%" y="287.50"></text></g></svg></svg>